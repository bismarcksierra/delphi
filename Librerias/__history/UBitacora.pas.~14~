Unit UBitacora;

Interface

Uses
  System.SysUtils, System.StrUtils;

Type
  /// <summary> Enumeración del tipo de registro en la bitácora</summary>
  TTipoRegistroBitacora = (tlNormal, tlExcepcion, tlEncabezado);

  /// <summary> Clase para generar los registros del sistema </summary>
  /// <remarks> Bismarck Sierra Ibarra 2018-11-26</remarks>
  TBitacora = Class
  Private
    FNombreArchivo : String;
  Public
    /// <summary> Creará la bitácora con el nombre de la aplicación y extensión .log </summary>
    Constructor Create; Overload;

    /// <summary> Creará la bitácora con el nombre, extensión y ruta especificada </summary>
    /// <param name="ANombreArchivo"> Nombre del archivo incluyendo ruta </param>
    Constructor Create(ANombreArchivo : String); Overload;

    /// <summary> Escribe una entrada en la bitácora </summary>
    /// <param name="AModulo"> Nombre del módulo de donde se manda llamar la bitácora </param>
    /// <param name="AMensaje"> Mensaje que se desea registrar </param>
    /// <param name="ATipo"> Tipo de registro que se desea hacer </param>
    /// <returns> Verdadero si se escribió correctamente, false de forma contraria </returns>
    Function Escribir(AModulo : String; AMensaje : String; ATipo : TTipoRegistroBitacora = tlNormal) : boolean;
  End;

Var
  GBitacora : TBitacora;

Implementation

Uses
  UUtilerias;
{ TLog }

Constructor TBitacora.Create;
Const
  EXTENSION_LOG = '.log';
Begin
  FNombreArchivo := TUtilerias.AplicacionObtenerNombre;
  FNombreArchivo := TUtilerias.ArchivoObtenerNombreSinExt(FNombreArchivo);
  FNombreArchivo := TUtilerias.AplicacionObtenerRuta + FNombreArchivo + FormatDateTime('yyyymm', Date) + EXTENSION_LOG;
End;

Constructor TBitacora.Create(ANombreArchivo : String);
Begin
  FNombreArchivo := ANombreArchivo;
End;

Function TBitacora.Escribir(AModulo : String; AMensaje : String; ATipo : TTipoRegistroBitacora = tlNormal) : boolean;
Const
  ANCHO_ENCABEZADO = 86;
Var
  LlArchivo : TextFile;
  LFecha    : String;
Begin
  result := true;

  If (Self = Nil) Then
    exit;

  // No se requiere instanciar la variable para llamar las funciones genéricas

  Try
    AssignFile(LlArchivo, FNombreArchivo);
    // Lectura/escritura
    FileMode := fmOpenWrite;
    If (Not FileExists(FNombreArchivo)) Then
      // Crea el archivo
      Rewrite(LlArchivo)
    Else
      // Abre el archivo para agregar
      Reset(LlArchivo);

    Append(LlArchivo);

    LFecha := FormatDateTime(FormatSettings.ShortDateFormat + ' ' + FormatSettings.ShortTimeFormat, Now);
    Case ATipo Of
      tlNormal :
        Writeln(LlArchivo, LFecha + ' ' + AMensaje);
      tlExcepcion :
        Writeln(LlArchivo, '***EXCEPCION*** ' + LFecha + ' [' + AModulo + '] ' + AMensaje);
      tlEncabezado :
        Begin
          Writeln(LlArchivo, StringOfchar('-', ANCHO_ENCABEZADO));
          Writeln(LlArchivo, TUtilerias.CadenaAlinearCentrar(AMensaje, ANCHO_ENCABEZADO));
          Writeln(LlArchivo, TUtilerias.CadenaAlinearCentrar(TUtilerias.AplicacionObtenerNombre + ' ver. ' +
            TUtilerias.AplicacionObtenerVersion + ' - ' + LFecha, ANCHO_ENCABEZADO));
          Writeln(LlArchivo, StringOfchar('-', ANCHO_ENCABEZADO));
        End;
    End;
    CloseFile(LlArchivo);
  Except
    result := false;
  End;
End;

End.
